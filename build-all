#!/bin/bash
#
# Script to build all (or most) libyui subprojects in the correct order.
#
# Author:  Stefan Hundhammer <shundhammer@suse.com>
# License: GPL V2

script_name=$(basename $0)
dry_run=0
verbose=0

# subprojects that will or will not be built
with_qt=1
with_ncurses=1
with_pkg=1
with_graph=1
with_rest_api=0
with_bindings=0


# Show usage information and exit.
function usage()
{
    echo ""
    echo "$script_name [Options] [configure|build|install|clean|doc]"
    echo ""
    echo "Build all (or most) libyui subprojects in the correct order."
    echo "Without options, this builds the 'typical' set of subprojects;"
    echo "To see which ones that are, use"
    echo ""
    echo "  $script_name -n"
    echo ""
    echo "Without any target argument, this script just executes 'make'"
    echo "in each subproject that already has a build/ subdirectory"
    echo "and the same as invoked with 'build' in each that doesn't."
    echo ""
    echo "Options:"
    echo ""
    echo "  -a  (all)      Build with all subprojects."
    echo "  -r  (rest-api) Build with rest-api."
    echo "  -b  (bindings) Build with bindings."
    echo ""
    echo "  -p  (pkg)      Build without pkg."
    echo "  -g  (graph)    Build without graph."
    echo "  -q  (qt)       Build without Qt."
    echo "  -c  (nCurses)  Build without NCurses."
    echo ""
    echo "  -h  (help) Show this usage message."
    echo "  -n  Dry run: Don't actually execute the commands, just show them."
    echo "  -v  Verbose"
    echo ""
    exit 2
}


# Process the command line and set some variables based on command line options.
function process_command_line()
{
    while getopts "aqcpgrbnvh" opt; do
	case "$opt" in
	    a)
                with_qt=1
                with_ncurses=1
                with_pkg=1
                with_graph=1
                with_rest_api=1
                with_bindings=1
		;;
            q)  with_qt=0
                ;;
            c)  with_ncurses=0
                ;;
            p)  with_pkg=0
                ;;
            g)  with_graph=0
                ;;
            r)  with_rest_api=1
                ;;
            b)  with_bindings=1
                ;;
	    n)
		dry_run=1
                echo ""
		echo "*** Dry run - not executing any make commands ***"
                echo ""
		;;
            v)
                verbose=1
                ;;
	    *)
		usage
		;;
	esac
    done
    shift $((OPTIND-1))

    # Don't fall back to "build" here yet, this is done in build_subdir()
    # for each subproject individually depending on an existing build/ subdir.
    target=$1
}


# Build in one subdir / subproject
function build_subdir()
{
    subdir=$1

    if [ -z "$target" -a -d $subdir/build ]; then
        # Without a target explicitly specified on the command line, don't
        # force removing everything that is already built in this subproject,
        # just try "make" there if there already is a build/ subdirectory.
        cmd="make -C $subdir/build -j$(nproc)"
    else
        tgt=${target:-build}
        cmd="make -C $subdir -f Makefile.repo $tgt"
    fi
    echo "$cmd"
    test $dry_run -eq 1 || $cmd
}


# Dump status variables to stdout
function dump_status()
{
    echo "with_qt:       $with_qt"
    echo "with_ncurses:  $with_ncurses"
    echo "with_pkg:      $with_pkg"
    echo "with_graph:    $with_graph"
    echo "with_rest_api: $with_rest_api"
    echo "with_bindings: $with_bindings"
    echo ""
    echo "Target: ${target:-(auto)}"
    echo ""
}


#----------------------------------------------------------------------
# main()
#----------------------------------------------------------------------

process_command_line $*
test $verbose -eq 1 && dump_status


#
# Build subprojects
#

# The libyui base lib is always built unconditionally
build_subdir libyui

if [ $with_qt -eq 1 ]; then
    build_subdir libyui-qt
    test $with_graph -eq 1 && build_subdir libyui-qt-graph
    test $with_pkg -eq 1   && build_subdir libyui-qt-pkg
fi

if [ $with_ncurses -eq 1 ]; then
    build_subdir libyui-ncurses
    test $with_pkg -eq 1 && build_subdir libyui-ncurses-pkg
fi

if [ $with_rest_api -eq 1 ]; then
    build_subdir libyui-rest-api
    test $with_qt      -eq 1 && build_subdir libyui-qt-rest-api
    test $with_ncurses -eq 1 && build_subdir libyui-ncurses-rest-api
fi

test $with_bindings -eq 1 && build_subdir libyui-bindings
